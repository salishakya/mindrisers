import numpy as np
import pandas as pd

rng = np.random.RandomState(0)
df = pd.DataFrame(
    {
        "key": ["A", "B", "C", "A", "B", "C"],
        "data1": range(6),
        "data2": rng.randint(0, 10, 6),
    },
    columns=["key", "data1", "data2"],
)

df

# reserved keywords ma chai = halni ani hami le define gareko ma chai colon

df.groupby("key").aggregate([min, np.mean, np.max])
# list ma pass gareko

# aba chai dataframe ma
df.groupby("key").aggregate({"data1": "min", "data2": "max"})

# transformation
df.groupby("key").transform(lambda x: x - x.mean())

from dateutil import parser  # noqa: E402

date = parser.parse("3rd of may, 2016")
date

from datetime import datetime  # noqa: E402

datetime(year=2016, month=7, day=24)

# both of them are native python functions

date.strftime("%A")

# tyo timee ma k day pareko cha?

date = pd.to_datetime("5th of august, 1963")

date

date.strftime("%A")

date + pd.to_timedelta(np.arange(12), "H")

index = pd.DatetimeIndex(pd.date_range("2015-1-22", "2020-1-22", periods=4))
data = pd.Series([0, 1, 2, 3], index=index)
data

pd.period_range("2016-07", periods=7, freq="M")

msft = pd.read_csv("MSFT_Stock_data.csv")
msft.tail()

ls  # type: ignore # noqa: F821

msft.set_index("Date", inplace=True)
msft.head()

# set index is explicit always

# check notes here
msft_close = msft["Close"]
print(msft_close.index)
print("previous data type is", msft_close.index.dtype)
print("-" * 40)
msft_close.index = pd.to_datetime(msft_close.index)
print(msft_close.index)
print("-" * 40)
print("new data type is ", msft_close.index.dtype)
print("-" * 40)

# %matplotlib inline
# Ensures that any plots generated by Matplotlib will be displayed directly in the Jupyter Notebook.

import matplotlib.pyplot as plt
# Imports the Matplotlib library and its 'pyplot' module, which provides a MATLAB-like interface for creating plots and visualizations.

import seaborn
# Imports the Seaborn library, which is built on top of Matplotlib and provides a high-level interface for drawing attractive and informative statistical graphics.

seaborn.set_theme()
# Sets the theme for Seaborn plots to the default theme, which enhances the visual aesthetics of the plots by using Seaborn's style settings.

msft_close.plot()
# Plots the data contained in the 'msft_close' variable, which is assumed to be a pandas Series or DataFrame, using Matplotlib's plotting function.

msft_close = msft["Close"]
msft_close.plot(alpha=0.5, style="-")
# Plots the original time series data from 'msft_close' with 50% transparency (alpha=0.5) and a solid line ('-').

msft_close.resample("BA").mean().plot(style=":")
# Resamples the 'msft_close' data to the Business Year-End frequency ('BA'), taking the mean of the values within each business year.
# Then, it plots the resampled data with a dotted line (style=':').

msft_close.asfreq("BA", method="ffill").plot(style="--")
# Converts the frequency of the 'msft_close' data to the Business Year-End frequency ('BA') using asfreq(), which selects the data at the specified frequency without aggregation.
# It plots the data with a dashed line (style='--').

plt.legend(["input", "resample", "asfreq"], loc="upper left")
# Adds a legend to the plot with labels for the original input data, the resampled data, and the asfreq-converted data.
# The legend is positioned in the upper-left corner of the plot.

msft10_14 = msft_close["2010":"2014"]
msft10_14
